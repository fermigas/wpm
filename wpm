#!/usr/bin/env bash

USAGE="\nUsage: wpm [option] [package]"
OPTIONS="\tsearch\t[package]\n\tinstall\t<package>\n\tupdate"
BASE=`dirname $0`

function wpm_search {
    pkg=""
    if  [ ! -z $1 ] ; then 
        local pkg=$(echo $1 | tr '[A-Z]' '[a-z]' )
    fi
   
    local total=0
    match=0
    for pack in $(ls $BASE/packages)
    do 
        if [[ "$pack" = *$1* ]] ; then
            fii=$($BASE/packages/$pack check_install)
            len=$(echo ${#pack}) 

            if [ $len -gt 14 ]; then 
                tab=""
            else 
                if [ $len -gt 6 ] ; then 
                    tab="\t"
                else 
                    tab="\t\t"
                fi
            fi

            if [[ "$fii" = "0" ]] ; then 
                stat="$tab- INSTALLED"
            else
                stat="$tab- NOT INSTALLED"
            fi
            echo -e "$pack $stat"
            if [[ "$pack" = $1 ]] ; then 
                let match=match+1
            fi
        fi
        let total=total+1
    done
    echo $match
}

function wpm_print_found {
    declare -a res=("$1") 
    echo "$res"
}

function wpm_found {
    declare -a res=($1)
    result=${#res[@]}
    let result=result-1
    result=${res[${result}]} # Last element is the number of found packages
    echo "$result"
}

function install_exe {
    binurl=$($BASE/packages/$1 "binurl")
    ofile=$($BASE/packages/$1 "o_file")
    md5=$($BASE/packages/$1 "md5")
    
    echo "Downloading $ofile..."
    result=$(wpm_download $ofile "$binurl")
    if [[ "$result" = "0" ]]; then 
        echo "Binary downloaded!"
        result=$(wpm_md5 $md5 "$BASE/binaries/$ofile")
        if [[ "$result" = "0" ]] ; then 
            echo "Executing binary file"
            cd $BASE/binaries/
            $2 $ofile
            result=$?
            cd - >> stderr
            if [[ ! "$result" = "0" ]]; then 
                echo "[$result] ERROR executing binary file or installation was cancelled"
            fi
        else 
            echo $result
        fi
    fi
}

function install_tarball {
    binurl=$($BASE/packages/$1 "binurl")
    ofile=$($BASE/packages/$1 "o_file")
    md5=$($BASE/packages/$1 "md5")

    echo "Downloading $ofile..."
    result=$(wpm_download $ofile "$binurl")

    if [[ "$result" = "0" ]] ; then 
        echo "Tarball downloaded!"
        $result=$(wpm_md5 $md5 "$BASE/binaries/$ofile")
        if [[ "$result" = "0" ]] ; then 
            echo "Extracting tarball..."
            cd $BASE/binaries/
            tar -xvf $ofile 
            result=$?
            cd - >> stderr 
            if [[ "$result" = "0" ]] ; then 
               setup=$($BASE/packages/$1 "setup_command")
               fpath=${ofile%.*}
               fpath=${fpath%.*}
               cd $BASE/binaries/$fpath 
               $setup
               result=$?
               cd - >> stderr 
               if [[ ! "$result" = "0" ]] ; then 
                    echo "[$result] Error executing setup command" 
               fi
            fi
        else 
            echo $result
        fi
    fi

}

function install_github {
    repourl=$($BASE/packages/$1 "binurl")
    git clone $repourl $BASE/binaries/$1
    result=$?

    if [[ "$result" = "0" || "$result" = "128" ]] ; then 
        if [[ "$result" = "128" ]] ; then 
            echo "Repository already downloaded"
        fi
        setup=$($BASE/packages/$1 "setup_command")
        cd $BASE/binaries/$1
        $setup 
        result=$?
        cd - >> stderr
        if [[ ! "$result" = "0" ]] ; then 
            echo "[$result] Error executing setup command"
        fi
    else 
        echo "[$result] Error cloning github repository"
    fi


}

function dependencies {
    result="0"
    for pack in $1 
    do
        result="0"
        if [ ! -f $BASE/packages/$pack ] ; then 
            result="4"
            if [ ! -z $2 ] ; then 
                if [[ "$2" = "print" ]] ; then 
                    echo "$pack - not exists in wpm"
                fi
            fi
        else 
            res=$($BASE/packages/$pack check_install )
            if [[ ! "$res" = "0" ]] ; then 
                result=$res
                if [ ! -z $2 ] ; then 
                    if [[ "$2" = "print" ]] ; then 
                        echo "$pack"
                    fi 
                fi
            fi
        fi
    done
    if [ -z $2 ]; then 
        echo $result
    fi
}

function wpm_install {
    result=$(wpm_search $1) 
    result=$(echo $result | tr -d "\n")
    found=$(wpm_found "$result")
    if [[ "$found" = "1" ]] ; then 
        echo "Checking dependencies..."
        depen=$($BASE/packages/$1 "depend")
        ok=$(dependencies "$depen" )
        if [[ "$ok" = "0" ]] ; then 
            echo "Dependencies OK"
            bintype=$($BASE/packages/$1 "bintype") # Get package type 
            case "$bintype" in 
                "msi" )
                    install_exe  $1 "msiexec -i " ;;
                "github" )
                    install_github $1;;
                "tarball" )
                    install_tarball $1;;
            esac
        else 
            dpack=$(dependencies "$depen" "print")
            echo -e "Please install dependencies"
            echo -e "====================================\n$dpack"
        fi
    else
        echo "=================================================="
        echo "$found packages found for that name."
    fi
}

function wpm_usage {
    echo -e $USAGE
    echo -e "\nOptions"
    echo -e $OPTIONS
}

function wpm_download {
    curl -o $BASE/binaries/$1 $2
    result=$?
    echo $result
    if [[ ! "$result" = "0" ]] ; then
        echo -e "\n\t[$result] Error downloading $1 ($2)"
    fi
}

function wpm_md5 {
    md5bin=$(md5sum $2)
    declare -a md5bin2=($md5bin)
    md5bin=${md5bin2[0]}
    if [[ "$1" = $md5bin ]] ; then 
        echo "0"
    else 
        echo "MD5 sum does not match! "
        echo "$1 - $md5bin"
    fi
}

function update_wpm {
    echo "Update..."
    if [ ! -d ~/bin/wpm ] ; then 
        echo 'wpm is not installed correctly'
    else 
        inipath=$(pwd)
        cd ~/bin/wpm 
        git pull & 
        cd "$initpath"
        exit
    fi
}

#---------------------------------------------------#
# Main 
#---------------------------------------------------#"

echo "_______________________________________________"
echo "__ __ __  _ __   _ __"  
echo "\ V  V / | |_ \ | |  \\" 
echo " \_/\_/  | .__/ |_|_|_|"
echo "         |_|"           
echo "_______________________________________________"
echo "simple package manager for gitbash"
echo "_______________________________________________"

if [ -z $1 ] ; then
    wpm_usage
fi 

case "$1" in 
    "search" ) 
        echo "Searching $2... " 
        echo "---------------------"
        result=$(wpm_search $2) 
        #echo $result
        packages=$(wpm_print_found "$result")
        found=$(wpm_found "$result")
        echo -e "Packages found: \n===================================="
        echo -e "$packages       \n===================================="
        echo "Match $found";;
    "install" )
        if [ -z $2 ] ; then 
            wpm_usage
        else
            wpm_install $2
        fi ;; 
    "update" )
        update_wpm;;

esac

